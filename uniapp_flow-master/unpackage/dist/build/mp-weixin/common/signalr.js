"use strict";const e=require("./vendor.js"),t=require("./weapp-cookie.js");var o,n;o=globalThis,n=function(o){class n extends Error{constructor(e,t){const o=new.target.prototype;super(`${e}: Status code '${t}'`),this.statusCode=t,this.__proto__=o}}class r extends Error{constructor(e="A timeout occurred."){const t=new.target.prototype;super(e),this.__proto__=t}}class s extends Error{constructor(e="An abort occurred."){const t=new.target.prototype;super(e),this.__proto__=t}}class i extends Error{constructor(e,t){const o=new.target.prototype;super(e),this.transport=t,this.errorType="UnsupportedTransportError",this.__proto__=o}}class a extends Error{constructor(e,t){const o=new.target.prototype;super(e),this.transport=t,this.errorType="DisabledTransportError",this.__proto__=o}}class c extends Error{constructor(e,t){const o=new.target.prototype;super(e),this.transport=t,this.errorType="FailedToStartTransportError",this.__proto__=o}}class l extends Error{constructor(e){const t=new.target.prototype;super(e),this.errorType="FailedToNegotiateWithServerError",this.__proto__=t}}class h extends Error{constructor(e,t){const o=new.target.prototype;super(e),this.innerErrors=t,this.__proto__=o}}class g{constructor(e,t,o){this.statusCode=e,this.statusText=t,this.content=o}}class p{get(e,t){return this.send({...t,method:"GET",url:e})}post(e,t){return this.send({...t,method:"POST",url:e})}delete(e,t){return this.send({...t,method:"DELETE",url:e})}getCookieString(e){return""}}var u;o.LogLevel=void 0,(u=o.LogLevel||(o.LogLevel={}))[u.Trace=0]="Trace",u[u.Debug=1]="Debug",u[u.Information=2]="Information",u[u.Warning=3]="Warning",u[u.Error=4]="Error",u[u.Critical=5]="Critical",u[u.None=6]="None";class d{constructor(){}log(e,t){}}d.instance=new d;const _="0.0.0-DEV_BUILD";class v{static isRequired(e,t){if(null==e)throw new Error(`The '${t}' argument is required.`)}static isNotEmpty(e,t){if(!e||e.match(/^\s*$/))throw new Error(`The '${t}' argument should not be empty.`)}static isIn(e,t,o){if(!(e in t))throw new Error(`Unknown ${o} value: ${e}.`)}}class f{static get isBrowser(){return!f.isNode&&"object"==typeof window&&"object"==typeof window.document}static get isWebWorker(){return!f.isNode&&"object"==typeof self&&"importScripts"in self}static get isReactNative(){return!f.isNode&&"object"==typeof window&&void 0===window.document}static get isNode(){return"undefined"!=typeof process&&process.release&&"node"===process.release.name}}function m(e,t){let o="";return w(e)?(o=`Binary data of length ${e.byteLength}`,t&&(o+=`. Content: '${function(e){const t=new Uint8Array(e);let o="";return t.forEach((e=>{o+=`0x${e<16?"0":""}${e.toString(16)} `})),o.substr(0,o.length-1)}(e)}'`)):"string"==typeof e&&(o=`String data of length ${e.length}`,t&&(o+=`. Content: '${e}'`)),o}function w(e){return e&&"undefined"!=typeof ArrayBuffer&&(e instanceof ArrayBuffer||e.constructor&&"ArrayBuffer"===e.constructor.name)}async function b(e,t,n,r,s,i){const a={},[c,l]=S();a[c]=l,e.log(o.LogLevel.Trace,`(${t} transport) sending data. ${m(s,i.logMessageContent)}.`);const h=w(s)?"arraybuffer":"text",g=await n.post(r,{content:s,headers:{...a,...i.headers},responseType:h,timeout:i.timeout,withCredentials:i.withCredentials});e.log(o.LogLevel.Trace,`(${t} transport) request complete. Response status: ${g.statusCode}.`)}class y{constructor(e,t){this._subject=e,this._observer=t}dispose(){const e=this._subject.observers.indexOf(this._observer);e>-1&&this._subject.observers.splice(e,1),0===this._subject.observers.length&&this._subject.cancelCallback&&this._subject.cancelCallback().catch((e=>{}))}}class C{constructor(e){this._minLevel=e,this.out=console}log(e,t){if(e>=this._minLevel){const n=`[${(new Date).toISOString()}] ${o.LogLevel[e]}: ${t}`;switch(e){case o.LogLevel.Critical:case o.LogLevel.Error:this.out.error(n);break;case o.LogLevel.Warning:this.out.warn(n);break;case o.LogLevel.Information:this.out.info(n);break;default:this.out.log(n)}}}}function S(){let e="X-SignalR-User-Agent";return f.isNode&&(e="User-Agent"),[e,L(_,T(),f.isNode?"NodeJS":"Browser",k())]}function L(e,t,o,n){let r="Microsoft SignalR/";const s=e.split(".");return r+=`${s[0]}.${s[1]}`,r+=` (${e}; `,r+=t&&""!==t?`${t}; `:"Unknown OS; ",r+=`${o}`,r+=n?`; ${n}`:"; Unknown Runtime Version",r+=")",r}function T(){if(!f.isNode)return"";switch(process.platform){case"win32":return"Windows NT";case"darwin":return"macOS";case"linux":return"Linux";default:return process.platform}}function k(){if(f.isNode)return process.versions.node}function E(e){return e.stack?e.stack:e.message?e.message:`${e}`}class I extends p{constructor(e){super(),this._logger=e}send(t){if(t.abortSignal&&t.abortSignal.aborted)return Promise.reject(new s);if(!t.method)return Promise.reject(new Error("No method defined."));if(!t.url)return Promise.reject(new Error("No url defined."));t.headers["X-Requested-With"]="XMLHttpRequest",""===t.content&&(t.content=void 0),t.content&&(w(t.content)?t.headers["Content-Type"]="application/octet-stream":t.headers["Content-Type"]="text/plain;charset=UTF-8");let o=t;return o.dataType="text",new Promise(((t,n)=>{o.success=e=>{console.log("success HttpResponse",e);let o=new g(e.statusCode,e.errMsg,e.data);t(o)},o.fail=e=>{console.log("fail HttpResponse",e),n(new Error(null==e?void 0:e.errMsg))},e.index.requestWithCookie(o)}))}}class P extends p{constructor(e){super(),this._logger=e}send(e){return e.abortSignal&&e.abortSignal.aborted?Promise.reject(new s):e.method?e.url?new Promise(((t,i)=>{const a=new XMLHttpRequest;a.open(e.method,e.url,!0),a.withCredentials=!1,a.setRequestHeader("X-Requested-With","XMLHttpRequest"),""===e.content&&(e.content=void 0),e.content&&(w(e.content)?a.setRequestHeader("Content-Type","application/octet-stream"):a.setRequestHeader("Content-Type","text/plain;charset=UTF-8"));const c=e.headers;c&&Object.keys(c).forEach((e=>{a.setRequestHeader(e,c[e])})),e.responseType&&(a.responseType=e.responseType),e.abortSignal&&(e.abortSignal.onabort=()=>{a.abort(),i(new s)}),e.timeout&&(a.timeout=e.timeout),a.onload=()=>{e.abortSignal&&(e.abortSignal.onabort=null),a.status>=200&&a.status<300?t(new g(a.status,a.statusText,a.response||a.responseText)):i(new n(a.response||a.responseText||a.statusText,a.status))},a.onerror=()=>{this._logger.log(o.LogLevel.Warning,`Error from HTTP request. ${a.status}: ${a.statusText}.`),i(new n(a.statusText,a.status))},a.ontimeout=()=>{this._logger.log(o.LogLevel.Warning,"Timeout from HTTP request."),i(new r)},a.send(e.content)})):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}}class $ extends p{constructor(t){if(super(),void 0!==e.wx$1)this._httpClient=new I(t);else{if("undefined"==typeof XMLHttpRequest)throw new Error("No usable HttpClient found.");this._httpClient=new P(t)}}send(e){return e.abortSignal&&e.abortSignal.aborted?Promise.reject(new s):e.method?e.url?this._httpClient.send(e):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}getCookieString(e){return this._httpClient.getCookieString(e)}}class H{static write(e){return`${e}${H.RecordSeparator}`}static parse(e){if(e[e.length-1]!==H.RecordSeparator)throw new Error("Message is incomplete.");const t=e.split(H.RecordSeparator);return t.pop(),t}}H.RecordSeparatorCode=30,H.RecordSeparator=String.fromCharCode(H.RecordSeparatorCode);class D{writeHandshakeRequest(e){return H.write(JSON.stringify(e))}parseHandshakeResponse(e){let t,o;if(w(e)){const n=new Uint8Array(e),r=n.indexOf(H.RecordSeparatorCode);if(-1===r)throw new Error("Message is incomplete.");const s=r+1;t=String.fromCharCode.apply(null,Array.prototype.slice.call(n.slice(0,s))),o=n.byteLength>s?n.slice(s).buffer:null}else{const n=e,r=n.indexOf(H.RecordSeparator);if(-1===r)throw new Error("Message is incomplete.");const s=r+1;t=n.substring(0,s),o=n.length>s?n.substring(s):null}const n=H.parse(t),r=JSON.parse(n[0]);if(r.type)throw new Error("Expected a handshake response from the server.");return[o,r]}}var R,M;o.MessageType=void 0,(R=o.MessageType||(o.MessageType={}))[R.Invocation=1]="Invocation",R[R.StreamItem=2]="StreamItem",R[R.Completion=3]="Completion",R[R.StreamInvocation=4]="StreamInvocation",R[R.CancelInvocation=5]="CancelInvocation",R[R.Ping=6]="Ping",R[R.Close=7]="Close";class x{constructor(){this.observers=[]}next(e){for(const t of this.observers)t.next(e)}error(e){for(const t of this.observers)t.error&&t.error(e)}complete(){for(const e of this.observers)e.complete&&e.complete()}subscribe(e){return this.observers.push(e),new y(this,e)}}o.HubConnectionState=void 0,(M=o.HubConnectionState||(o.HubConnectionState={})).Disconnected="Disconnected",M.Connecting="Connecting",M.Connected="Connected",M.Disconnecting="Disconnecting",M.Reconnecting="Reconnecting";class N{static create(e,t,o,n,r,s){return new N(e,t,o,n,r,s)}constructor(e,t,n,r,s,i){this._nextKeepAlive=0,this._freezeEventListener=()=>{this._logger.log(o.LogLevel.Warning,"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://learn.microsoft.com/aspnet/core/signalr/javascript-client#bsleep")},v.isRequired(e,"connection"),v.isRequired(t,"logger"),v.isRequired(n,"protocol"),this.serverTimeoutInMilliseconds=null!=s?s:6e4,this.keepAliveIntervalInMilliseconds=null!=i?i:45e3,this._logger=t,this._protocol=n,this.connection=e,this._reconnectPolicy=r,this._handshakeProtocol=new D,this.connection.onreceive=e=>this._processIncomingData(e),this.connection.onclose=e=>this._connectionClosed(e),this._callbacks={},this._methods={},this._closedCallbacks=[],this._reconnectingCallbacks=[],this._reconnectedCallbacks=[],this._invocationId=0,this._receivedHandshakeResponse=!1,this._connectionState=o.HubConnectionState.Disconnected,this._connectionStarted=!1,this._cachedPingMessage=this._protocol.writeMessage({type:o.MessageType.Ping})}get state(){return this._connectionState}get connectionId(){return this.connection&&this.connection.connectionId||null}get baseUrl(){return this.connection.baseUrl||""}set baseUrl(e){if(this._connectionState!==o.HubConnectionState.Disconnected&&this._connectionState!==o.HubConnectionState.Reconnecting)throw new Error("The HubConnection must be in the Disconnected or Reconnecting state to change the url.");if(!e)throw new Error("The HubConnection url must be a valid url.");this.connection.baseUrl=e}start(){return this._startPromise=this._startWithStateTransitions(),this._startPromise}async _startWithStateTransitions(){if(this._connectionState!==o.HubConnectionState.Disconnected)return Promise.reject(new Error("Cannot start a HubConnection that is not in the 'Disconnected' state."));this._connectionState=o.HubConnectionState.Connecting,this._logger.log(o.LogLevel.Debug,"Starting HubConnection.");try{await this._startInternal(),f.isBrowser&&window.document.addEventListener("freeze",this._freezeEventListener),this._connectionState=o.HubConnectionState.Connected,this._connectionStarted=!0,this._logger.log(o.LogLevel.Debug,"HubConnection connected successfully.")}catch(e){return this._connectionState=o.HubConnectionState.Disconnected,this._logger.log(o.LogLevel.Debug,`HubConnection failed to start successfully because of error '${e}'.`),Promise.reject(e)}}async _startInternal(){this._stopDuringStartError=void 0,this._receivedHandshakeResponse=!1;const e=new Promise(((e,t)=>{this._handshakeResolver=e,this._handshakeRejecter=t}));await this.connection.start(this._protocol.transferFormat);try{const t={protocol:this._protocol.name,version:this._protocol.version};if(this._logger.log(o.LogLevel.Debug,"Sending handshake request."),await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(t)),this._logger.log(o.LogLevel.Information,`Using HubProtocol '${this._protocol.name}'.`),this._cleanupTimeout(),this._resetTimeoutPeriod(),this._resetKeepAliveInterval(),await e,this._stopDuringStartError)throw this._stopDuringStartError;this.connection.features.inherentKeepAlive||await this._sendMessage(this._cachedPingMessage)}catch(t){throw this._logger.log(o.LogLevel.Debug,`Hub handshake failed with error '${t}' during start(). Stopping HubConnection.`),this._cleanupTimeout(),this._cleanupPingTimer(),await this.connection.stop(t),t}}async stop(){const e=this._startPromise;this._stopPromise=this._stopInternal(),await this._stopPromise;try{await e}catch(t){}}_stopInternal(e){if(this._connectionState===o.HubConnectionState.Disconnected)return this._logger.log(o.LogLevel.Debug,`Call to HubConnection.stop(${e}) ignored because it is already in the disconnected state.`),Promise.resolve();if(this._connectionState===o.HubConnectionState.Disconnecting)return this._logger.log(o.LogLevel.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnecting state.`),this._stopPromise;const t=this._connectionState;return this._connectionState=o.HubConnectionState.Disconnecting,this._logger.log(o.LogLevel.Debug,"Stopping HubConnection."),this._reconnectDelayHandle?(this._logger.log(o.LogLevel.Debug,"Connection stopped during reconnect delay. Done reconnecting."),clearTimeout(this._reconnectDelayHandle),this._reconnectDelayHandle=void 0,this._completeClose(),Promise.resolve()):(t===o.HubConnectionState.Connected&&this._sendCloseMessage(),this._cleanupTimeout(),this._cleanupPingTimer(),this._stopDuringStartError=e||new s("The connection was stopped before the hub handshake could complete."),this.connection.stop(e))}async _sendCloseMessage(){try{await this._sendWithProtocol(this._createCloseMessage())}catch{}}stream(e,...t){const[n,r]=this._replaceStreamingParams(t),s=this._createStreamInvocation(e,t,r);let i;const a=new x;return a.cancelCallback=()=>{const e=this._createCancelInvocation(s.invocationId);return delete this._callbacks[s.invocationId],i.then((()=>this._sendWithProtocol(e)))},this._callbacks[s.invocationId]=(e,t)=>{t?a.error(t):e&&(e.type===o.MessageType.Completion?e.error?a.error(new Error(e.error)):a.complete():a.next(e.item))},i=this._sendWithProtocol(s).catch((e=>{a.error(e),delete this._callbacks[s.invocationId]})),this._launchStreams(n,i),a}_sendMessage(e){return this._resetKeepAliveInterval(),this.connection.send(e)}_sendWithProtocol(e){return this._sendMessage(this._protocol.writeMessage(e))}send(e,...t){const[o,n]=this._replaceStreamingParams(t),r=this._sendWithProtocol(this._createInvocation(e,t,!0,n));return this._launchStreams(o,r),r}invoke(e,...t){const[n,r]=this._replaceStreamingParams(t),s=this._createInvocation(e,t,!1,r),i=new Promise(((e,t)=>{this._callbacks[s.invocationId]=(n,r)=>{r?t(r):n&&(n.type===o.MessageType.Completion?n.error?t(new Error(n.error)):e(n.result):t(new Error(`Unexpected message type: ${n.type}`)))};const r=this._sendWithProtocol(s).catch((e=>{t(e),delete this._callbacks[s.invocationId]}));this._launchStreams(n,r)}));return this._timeoutHandle=setTimeout((()=>{i.catch((e=>{this._connectionState!==o.HubConnectionState.Disconnected&&this._connectionState!==o.HubConnectionState.Disconnecting||this._reconnect(new Error(e||"server not connected"))}))}),5e3),i}on(e,t){e&&t&&(e=e.toLowerCase(),this._methods[e]||(this._methods[e]=[]),-1===this._methods[e].indexOf(t)&&this._methods[e].push(t))}off(e,t){if(!e)return;e=e.toLowerCase();const o=this._methods[e];if(o)if(t){const n=o.indexOf(t);-1!==n&&(o.splice(n,1),0===o.length&&delete this._methods[e])}else delete this._methods[e]}onclose(e){e&&this._closedCallbacks.push(e)}onreconnecting(e){e&&this._reconnectingCallbacks.push(e)}onreconnected(e){e&&this._reconnectedCallbacks.push(e)}_processIncomingData(e){if(this._cleanupTimeout(),this._receivedHandshakeResponse||(e=this._processHandshakeResponse(e),this._receivedHandshakeResponse=!0),e){const n=this._protocol.parseMessages(e,this._logger);for(const e of n)switch(e.type){case o.MessageType.Invocation:this._invokeClientMethod(e);break;case o.MessageType.StreamItem:case o.MessageType.Completion:{const n=this._callbacks[e.invocationId];if(n){e.type===o.MessageType.Completion&&delete this._callbacks[e.invocationId];try{n(e)}catch(t){this._logger.log(o.LogLevel.Error,`Stream callback threw error: ${E(t)}`)}}break}case o.MessageType.Ping:break;case o.MessageType.Close:{this._logger.log(o.LogLevel.Information,"Close message received from server.");const t=e.error?new Error("Server returned an error on close: "+e.error):void 0;!0===e.allowReconnect?this.connection.stop(t):this._stopPromise=this._stopInternal(t);break}default:this._logger.log(o.LogLevel.Warning,`Invalid message type: ${e.type}.`)}}this._resetTimeoutPeriod()}_processHandshakeResponse(e){let t,n;try{[n,t]=this._handshakeProtocol.parseHandshakeResponse(e)}catch(r){const e="Error parsing handshake response: "+r;this._logger.log(o.LogLevel.Error,e);const t=new Error(e);throw this._handshakeRejecter(t),t}if(t.error){const e="Server returned handshake error: "+t.error;this._logger.log(o.LogLevel.Error,e);const n=new Error(e);throw this._handshakeRejecter(n),n}return this._logger.log(o.LogLevel.Debug,"Server handshake complete."),this._handshakeResolver(),n}_resetKeepAliveInterval(){this.connection.features.inherentKeepAlive||(this._nextKeepAlive=(new Date).getTime()+this.keepAliveIntervalInMilliseconds,this._cleanupPingTimer())}_resetTimeoutPeriod(){if(!(this.connection.features&&this.connection.features.inherentKeepAlive||(this._timeoutHandle=setTimeout((()=>this.serverTimeout()),this.serverTimeoutInMilliseconds),void 0!==this._pingServerHandle))){let e=this._nextKeepAlive-(new Date).getTime();e<0&&(e=0),this._pingServerHandle=setTimeout((async()=>{if(this._connectionState===o.HubConnectionState.Connected)try{await this._sendMessage(this._cachedPingMessage)}catch{this._cleanupPingTimer()}}),e)}}serverTimeout(){this.connection.stop(new Error("Server timeout elapsed without receiving a message from the server."))}async _invokeClientMethod(e){const t=e.target.toLowerCase(),n=this._methods[t];if(!n)return this._logger.log(o.LogLevel.Warning,`No client method with the name '${t}' found.`),void(e.invocationId&&(this._logger.log(o.LogLevel.Warning,`No result given for '${t}' method and invocation ID '${e.invocationId}'.`),await this._sendWithProtocol(this._createCompletionMessage(e.invocationId,"Client didn't provide a result.",null))));const r=n.slice(),s=!!e.invocationId;let i,a,c;for(const h of r)try{const n=i;i=await h.apply(this,e.arguments),s&&i&&n&&(this._logger.log(o.LogLevel.Error,`Multiple results provided for '${t}'. Sending error to server.`),c=this._createCompletionMessage(e.invocationId,"Client provided multiple results.",null)),a=void 0}catch(l){a=l,this._logger.log(o.LogLevel.Error,`A callback for the method '${t}' threw error '${l}'.`)}c?await this._sendWithProtocol(c):s?(a?c=this._createCompletionMessage(e.invocationId,`${a}`,null):void 0!==i?c=this._createCompletionMessage(e.invocationId,null,i):(this._logger.log(o.LogLevel.Warning,`No result given for '${t}' method and invocation ID '${e.invocationId}'.`),c=this._createCompletionMessage(e.invocationId,"Client didn't provide a result.",null)),await this._sendWithProtocol(c)):i&&this._logger.log(o.LogLevel.Error,`Result given for '${t}' method but server is not expecting a result.`)}_connectionClosed(e){this._logger.log(o.LogLevel.Debug,`HubConnection.connectionClosed(${e}) called while in state ${this._connectionState}.`),this._stopDuringStartError=this._stopDuringStartError||e||new s("The underlying connection was closed before the hub handshake could complete."),this._handshakeResolver&&this._handshakeResolver(),this._cancelCallbacksWithError(e||new Error("Invocation canceled due to the underlying connection being closed.")),this._cleanupTimeout(),this._cleanupPingTimer(),this._connectionState===o.HubConnectionState.Disconnecting?this._completeClose(e):this._connectionState===o.HubConnectionState.Connected&&this._reconnectPolicy?this._reconnect(e):this._connectionState===o.HubConnectionState.Connected&&this._completeClose(e)}_completeClose(e){if(this._connectionStarted){this._connectionState=o.HubConnectionState.Disconnected,this._connectionStarted=!1,f.isBrowser&&window.document.removeEventListener("freeze",this._freezeEventListener);try{this._closedCallbacks.forEach((t=>t.apply(this,[e])))}catch(t){this._logger.log(o.LogLevel.Error,`An onclose callback called with error '${e}' threw error '${t}'.`)}}}async _reconnect(e){const t=Date.now();let n=0,r=void 0!==e?e:new Error("Attempting to reconnect due to a unknown error."),s=this._getNextRetryDelay(n++,0,r);if(null===s)return this._logger.log(o.LogLevel.Debug,"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt."),void this._completeClose(e);if(this._connectionState=o.HubConnectionState.Reconnecting,e?this._logger.log(o.LogLevel.Information,`Connection reconnecting because of error '${e}'.`):this._logger.log(o.LogLevel.Information,"Connection reconnecting."),0!==this._reconnectingCallbacks.length){try{this._reconnectingCallbacks.forEach((t=>t.apply(this,[e])))}catch(i){this._logger.log(o.LogLevel.Error,`An onreconnecting callback called with error '${e}' threw error '${i}'.`)}if(this._connectionState!==o.HubConnectionState.Reconnecting)return void this._logger.log(o.LogLevel.Debug,"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.")}for(;null!==s;){if(this._logger.log(o.LogLevel.Information,`Reconnect attempt number ${n} will start in ${s} ms.`),await new Promise((e=>{this._reconnectDelayHandle=setTimeout(e,s)})),this._reconnectDelayHandle=void 0,this._connectionState!==o.HubConnectionState.Reconnecting)return void this._logger.log(o.LogLevel.Debug,"Connection left the reconnecting state during reconnect delay. Done reconnecting.");try{if(await this._startInternal(),this._connectionState=o.HubConnectionState.Connected,this._logger.log(o.LogLevel.Information,"HubConnection reconnected successfully."),0!==this._reconnectedCallbacks.length)try{this._reconnectedCallbacks.forEach((e=>e.apply(this,[this.connection.connectionId])))}catch(i){this._logger.log(o.LogLevel.Error,`An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${i}'.`)}return}catch(i){if(this._logger.log(o.LogLevel.Information,`Reconnect attempt failed because of error '${i}'.`),this._connectionState!==o.HubConnectionState.Reconnecting)return this._logger.log(o.LogLevel.Debug,`Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`),void(this._connectionState===o.HubConnectionState.Disconnecting&&this._completeClose());r=i instanceof Error?i:new Error(i.toString()),s=this._getNextRetryDelay(n++,Date.now()-t,r)}}this._logger.log(o.LogLevel.Information,`Reconnect retries have been exhausted after ${Date.now()-t} ms and ${n} failed attempts. Connection disconnecting.`),this._completeClose()}_getNextRetryDelay(e,t,n){try{return this._reconnectPolicy.nextRetryDelayInMilliseconds({elapsedMilliseconds:t,previousRetryCount:e,retryReason:n})}catch(r){return this._logger.log(o.LogLevel.Error,`IRetryPolicy.nextRetryDelayInMilliseconds(${e}, ${t}) threw error '${r}'.`),null}}_cancelCallbacksWithError(e){const t=this._callbacks;this._callbacks={},Object.keys(t).forEach((n=>{const r=t[n];try{r(null,e)}catch(s){this._logger.log(o.LogLevel.Error,`Stream 'error' callback called with '${e}' threw error: ${E(s)}`)}}))}_cleanupPingTimer(){this._pingServerHandle&&(clearTimeout(this._pingServerHandle),this._pingServerHandle=void 0)}_cleanupTimeout(){this._timeoutHandle&&clearTimeout(this._timeoutHandle)}_createInvocation(e,t,n,r){if(n)return 0!==r.length?{arguments:t,streamIds:r,target:e,type:o.MessageType.Invocation}:{arguments:t,target:e,type:o.MessageType.Invocation};{const n=this._invocationId;return this._invocationId++,0!==r.length?{arguments:t,invocationId:n.toString(),streamIds:r,target:e,type:o.MessageType.Invocation}:{arguments:t,invocationId:n.toString(),target:e,type:o.MessageType.Invocation}}}_launchStreams(e,t){if(0!==e.length){t||(t=Promise.resolve());for(const o in e)e[o].subscribe({complete:()=>{t=t.then((()=>this._sendWithProtocol(this._createCompletionMessage(o))))},error:e=>{let n;n=e instanceof Error?e.message:e&&e.toString?e.toString():"Unknown error",t=t.then((()=>this._sendWithProtocol(this._createCompletionMessage(o,n))))},next:e=>{t=t.then((()=>this._sendWithProtocol(this._createStreamItemMessage(o,e))))}})}}_replaceStreamingParams(e){const t=[],o=[];for(let n=0;n<e.length;n++){const r=e[n];if(this._isObservable(r)){const s=this._invocationId;this._invocationId++,t[s]=r,o.push(s.toString()),e.splice(n,1)}}return[t,o]}_isObservable(e){return e&&e.subscribe&&"function"==typeof e.subscribe}_createStreamInvocation(e,t,n){const r=this._invocationId;return this._invocationId++,0!==n.length?{arguments:t,invocationId:r.toString(),streamIds:n,target:e,type:o.MessageType.StreamInvocation}:{arguments:t,invocationId:r.toString(),target:e,type:o.MessageType.StreamInvocation}}_createCancelInvocation(e){return{invocationId:e,type:o.MessageType.CancelInvocation}}_createStreamItemMessage(e,t){return{invocationId:e,item:t,type:o.MessageType.StreamItem}}_createCompletionMessage(e,t,n){return t?{error:t,invocationId:e,type:o.MessageType.Completion}:{invocationId:e,result:n,type:o.MessageType.Completion}}_createCloseMessage(){return{type:o.MessageType.Close}}}const W=[0,2e3,1e4,3e4,null];class A{constructor(e){this._retryDelays=void 0!==e?[...e,null]:W}nextRetryDelayInMilliseconds(e){return this._retryDelays[e.previousRetryCount]}}class j{}j.Authorization="Authorization",j.Cookie="Cookie";class F extends p{constructor(e,t){super(),this._innerClient=e,this._accessTokenFactory=t}async send(e){let t=!0;this._accessTokenFactory&&(!this._accessToken||e.url&&e.url.indexOf("/negotiate?")>0)&&(t=!1,this._accessToken=await this._accessTokenFactory()),this._setAuthorizationHeader(e);const o=await this._innerClient.send(e);return t&&401===o.statusCode&&this._accessTokenFactory?(this._accessToken=await this._accessTokenFactory(),this._setAuthorizationHeader(e),await this._innerClient.send(e)):o}_setAuthorizationHeader(e){e.headers||(e.headers={}),this._accessToken?e.headers[j.Authorization]=`Bearer ${this._accessToken}`:this._accessTokenFactory&&e.headers[j.Authorization]&&delete e.headers[j.Authorization]}getCookieString(e){return this._innerClient.getCookieString(e)}}var q,O;o.HttpTransportType=void 0,(q=o.HttpTransportType||(o.HttpTransportType={}))[q.None=0]="None",q[q.WebSockets=1]="WebSockets",q[q.ServerSentEvents=2]="ServerSentEvents",q[q.LongPolling=4]="LongPolling",o.TransferFormat=void 0,(O=o.TransferFormat||(o.TransferFormat={}))[O.Text=1]="Text",O[O.Binary=2]="Binary";class U{constructor(){this._isAborted=!1,this.onabort=null}abort(){this._isAborted||(this._isAborted=!0,this.onabort&&this.onabort())}get signal(){return this}get aborted(){return this._isAborted}}class B{get pollAborted(){return this._pollAbort.aborted}constructor(e,t,o){this._httpClient=e,this._logger=t,this._pollAbort=new U,this._options=o,this._running=!1,this.onreceive=null,this.onclose=null}async connect(e,t){if(v.isRequired(e,"url"),v.isRequired(t,"transferFormat"),v.isIn(t,o.TransferFormat,"transferFormat"),this._url=e,this._logger.log(o.LogLevel.Trace,"(LongPolling transport) Connecting."),t===o.TransferFormat.Binary&&"undefined"!=typeof XMLHttpRequest&&"string"!=typeof(new XMLHttpRequest).responseType)throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported.");const[r,s]=S(),i={[r]:s,...this._options.headers},a={abortSignal:this._pollAbort.signal,headers:i,timeout:1e5,withCredentials:this._options.withCredentials};t===o.TransferFormat.Binary&&(a.responseType="arraybuffer");const c=`${e}&_=${Date.now()}`;this._logger.log(o.LogLevel.Trace,`(LongPolling transport) polling: ${c}.`);const l=await this._httpClient.get(c,a);200!==l.statusCode?(this._logger.log(o.LogLevel.Error,`(LongPolling transport) Unexpected response code: ${l.statusCode}.`),this._closeError=new n(l.statusText||"",l.statusCode),this._running=!1):this._running=!0,this._receiving=this._poll(this._url,a)}async _poll(e,t){try{for(;this._running;)try{const r=`${e}&_=${Date.now()}`;this._logger.log(o.LogLevel.Trace,`(LongPolling transport) polling: ${r}.`);const s=await this._httpClient.get(r,t);204===s.statusCode?(this._logger.log(o.LogLevel.Information,"(LongPolling transport) Poll terminated by server."),this._running=!1):200!==s.statusCode?(this._logger.log(o.LogLevel.Error,`(LongPolling transport) Unexpected response code: ${s.statusCode}.`),this._closeError=new n(s.statusText||"",s.statusCode),this._running=!1):s.content?(this._logger.log(o.LogLevel.Trace,`(LongPolling transport) data received. ${m(s.content,this._options.logMessageContent)}.`),this.onreceive&&this.onreceive(s.content)):this._logger.log(o.LogLevel.Trace,"(LongPolling transport) Poll timed out, reissuing.")}catch(s){this._running?s instanceof r?this._logger.log(o.LogLevel.Trace,"(LongPolling transport) Poll timed out, reissuing."):(this._closeError=s,this._running=!1):this._logger.log(o.LogLevel.Trace,`(LongPolling transport) Poll errored after shutdown: ${s.message}`)}}finally{this._logger.log(o.LogLevel.Trace,"(LongPolling transport) Polling complete."),this.pollAborted||this._raiseOnClose()}}async send(e){return this._running?b(this._logger,"LongPolling",this._httpClient,this._url,e,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}async stop(){this._logger.log(o.LogLevel.Trace,"(LongPolling transport) Stopping polling."),this._running=!1,this._pollAbort.abort();try{await this._receiving,this._logger.log(o.LogLevel.Trace,`(LongPolling transport) sending DELETE request to ${this._url}.`);const t={},[r,s]=S();t[r]=s;const i={headers:{...t,...this._options.headers},timeout:this._options.timeout,withCredentials:this._options.withCredentials};let a;try{await this._httpClient.delete(this._url,i)}catch(e){a=e}a?a instanceof n&&(404===a.statusCode?this._logger.log(o.LogLevel.Trace,"(LongPolling transport) A 404 response was returned from sending a DELETE request."):this._logger.log(o.LogLevel.Trace,`(LongPolling transport) Error sending a DELETE request: ${a}`)):this._logger.log(o.LogLevel.Trace,"(LongPolling transport) DELETE request accepted.")}finally{this._logger.log(o.LogLevel.Trace,"(LongPolling transport) Stop finished."),this._raiseOnClose()}}_raiseOnClose(){if(this.onclose){let e="(LongPolling transport) Firing onclose event.";this._closeError&&(e+=" Error: "+this._closeError),this._logger.log(o.LogLevel.Trace,e),this.onclose(this._closeError)}}}class z{constructor(e,t,o,n){this._httpClient=e,this._accessToken=t,this._logger=o,this._options=n,this.onreceive=null,this.onclose=null}async connect(e,n){v.isRequired(e,"url"),v.isRequired(n,"transferFormat"),v.isIn(n,o.TransferFormat,"transferFormat"),this._logger.log(o.LogLevel.Trace,"(SSE transport) Connecting.");let r=(e||"").split("/")[2].split(":")[0],s=t.cookieManager.default.getRequestQueries(r,"/");return e=e+"&"+s,this._url=e,this._accessToken&&(e+=(e.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(this._accessToken)}`),new Promise(((t,r)=>{let s,i=!1;if(n===o.TransferFormat.Text){if(f.isBrowser||f.isWebWorker)s=new this._options.EventSource(e,{withCredentials:this._options.withCredentials});else{const t=this._httpClient.getCookieString(e),o={};o.Cookie=t;const[n,r]=S();o[n]=r,s=new this._options.EventSource(e,{withCredentials:this._options.withCredentials,headers:{...o,...this._options.headers}})}try{s.onmessage=e=>{if(this.onreceive)try{this._logger.log(o.LogLevel.Trace,`(SSE transport) data received. ${m(e.data,this._options.logMessageContent)}.`),this.onreceive(e.data)}catch(t){return void this._close(t)}},s.onerror=e=>{i?this._close():r(new Error("EventSource failed to connect. The connection could not be found on the server, either the connection ID is not present on the server, or a proxy is refusing/buffering the connection. If you have multiple servers check that sticky sessions are enabled."))},s.onopen=()=>{this._logger.log(o.LogLevel.Information,`SSE connected to ${this._url}`),this._eventSource=s,i=!0,t()}}catch(a){return void r(a)}}else r(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"))}))}async send(e){return this._eventSource?b(this._logger,"SSE",this._httpClient,this._url,e,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}stop(){return this._close(),Promise.resolve()}_close(e){this._eventSource&&(this._eventSource.close(),this._eventSource=void 0,this.onclose&&this.onclose(e))}}class K{get readyState(){return this._socketTask.readyState}constructor(e,t,o){this.CONNECTING=0,this.OPEN=1,this.CLOSING=2,this.CLOSED=3,this.onclose=null,this.onerror=null,this.onmessage=null,this.onopen=null,this._url=e,this._socketTask=o}url(){return this._url}close(e,t){this._socketTask.close({code:e,reason:t})}send(e){this._socketTask.send({data:e})}}class Q{constructor(e,t,o,n,r,s){this._logger=o,this._accessTokenFactory=t,this._logMessageContent=n,this._webSocketConstructor=r,this._httpClient=e,this.onreceive=null,this.onclose=null,this._headers=s}async connect(n,r){let s;return v.isRequired(n,"url"),v.isRequired(r,"transferFormat"),v.isIn(r,o.TransferFormat,"transferFormat"),this._logger.log(o.LogLevel.Trace,"(WebSockets transport) Connecting."),this._accessTokenFactory&&(s=await this._accessTokenFactory()),void 0!==e.wx$1?new Promise(((r,s)=>{let i=(n||"").split("/")[2].split(":")[0],a=t.cookieManager.default.getRequestQueries(i,"/");n=(n=n.replace(/^http/,"ws"))+"&"+a;let c,l=!1,h={header:{...this._headers},method:"GET",complete:()=>{}};h.url=n,console.log("SocketTask options:",h),c=e.index.connectSocket(h),c.onOpen((e=>{this._logger.log(o.LogLevel.Information,`SocketTask connected to ${n}.`),this._webSocket=new K(n,void 0,c),l=!0,r()})),c.onError((e=>{let t=null;t=new Error(e.errMsg),this._logger.log(o.LogLevel.Information,`(SocketTask transport) ${t}.`)})),c.onMessage((e=>{if(this._logger.log(o.LogLevel.Trace,`(SocketTask transport) data received. ${m(e.data,this._logMessageContent)}.`),this.onreceive)try{this.onreceive(e.data)}catch(t){return void this._close(t)}})),c.onClose((()=>{if(l)this._close({reason:"close SocketTask."});else{let e=null;e="SocketTask failed to connect. The connection could not be found on the server, either the endpoint may not be a SignalR endpoint, the connection ID is not present on the server, or there is a proxy blocking SocketTask. If you have multiple servers check that sticky sessions are enabled.",s(new Error(e))}}))})):new Promise(((e,i)=>{let a,c=(n||"").split("/")[2].split(":")[0],l=t.cookieManager.default.getRequestQueries(c,"/");n=(n=n.replace(/^http/,"ws"))+"&"+l;const h=this._httpClient.getCookieString(n);let g=!1;if(f.isNode||f.isReactNative){const e={},[t,o]=S();e[t]=o,s&&(e[j.Authorization]=`Bearer ${s}`),h&&(e[j.Cookie]=h),a=new this._webSocketConstructor(n,void 0,{headers:{...e,...this._headers}})}else s&&(n+=(n.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(s)}`);a||(a=new this._webSocketConstructor(n)),r===o.TransferFormat.Binary&&(a.binaryType="arraybuffer"),a.onopen=t=>{this._logger.log(o.LogLevel.Information,`WebSocket connected to ${n}.`),this._webSocket=a,g=!0,e()},a.onerror=e=>{let t=null;t="undefined"!=typeof ErrorEvent&&e instanceof ErrorEvent?e.error:"There was an error with the transport",this._logger.log(o.LogLevel.Information,`(WebSockets transport) ${t}.`)},a.onmessage=e=>{if(this._logger.log(o.LogLevel.Trace,`(WebSockets transport) data received. ${m(e.data,this._logMessageContent)}.`),this.onreceive)try{this.onreceive(e.data)}catch(t){return void this._close(t)}},a.onclose=e=>{if(g)this._close(e);else{let t=null;t="undefined"!=typeof ErrorEvent&&e instanceof ErrorEvent?e.error:"WebSocket failed to connect. The connection could not be found on the server, either the endpoint may not be a SignalR endpoint, the connection ID is not present on the server, or there is a proxy blocking WebSockets. If you have multiple servers check that sticky sessions are enabled.",i(new Error(t))}}}))}send(e){return this._webSocket&&1===this._webSocket.readyState?(this._logger.log(o.LogLevel.Trace,`(WebSockets transport) sending data. ${m(e,this._logMessageContent)}.`),this._webSocket.send(e),Promise.resolve()):Promise.reject("WebSocket is not in the OPEN state")}stop(){return this._webSocket&&this._close(void 0),Promise.resolve()}_close(e){this._webSocket&&(this._webSocket.onclose=()=>{},this._webSocket.onmessage=()=>{},this._webSocket.onerror=()=>{},this._webSocket.close(),this._webSocket=void 0),this._logger.log(o.LogLevel.Trace,"(WebSockets transport) socket closed."),this.onclose&&(!this._isCloseEvent(e)||!1!==e.wasClean&&1e3===e.code?e instanceof Error?this.onclose(e):this.onclose():this.onclose(new Error(`WebSocket closed with status code: ${e.code} (${e.reason||"no reason given"}).`)))}_isCloseEvent(e){return e&&"boolean"==typeof e.wasClean&&"number"==typeof e.code}}class V{constructor(e,t={}){var n;if(this._stopPromiseResolver=()=>{},this.features={},this._negotiateVersion=1,v.isRequired(e,"url"),this._logger=void 0===(n=t.logger)?new C(o.LogLevel.Information):null===n?d.instance:void 0!==n.log?n:new C(n),this.baseUrl=this._resolveUrl(e),(t=t||{}).UniWebSocket=K.prototype,t.logMessageContent=void 0!==t.logMessageContent&&t.logMessageContent,"boolean"!=typeof t.withCredentials&&void 0!==t.withCredentials)throw new Error("withCredentials option was not a 'boolean' or 'undefined' value");t.withCredentials=!1,t.timeout=void 0===t.timeout?1e5:t.timeout,f.isNode||"undefined"==typeof WebSocket||t.WebSocket?f.isNode&&t.WebSocket:t.WebSocket=WebSocket,f.isNode||"undefined"==typeof EventSource||t.EventSource?f.isNode&&!t.EventSource&&(t.EventSource=null):t.EventSource=EventSource,this._httpClient=new F(t.httpClient||new $(this._logger),t.accessTokenFactory),this._connectionState="Disconnected",this._connectionStarted=!1,this._options=t,this.onreceive=null,this.onclose=null}async start(e){if(e=e||o.TransferFormat.Binary,v.isIn(e,o.TransferFormat,"transferFormat"),this._logger.log(o.LogLevel.Debug,`Starting connection with transfer format '${o.TransferFormat[e]}'.`),"Disconnected"!==this._connectionState)return Promise.reject(new Error("Cannot start an HttpConnection that is not in the 'Disconnected' state."));if(this._connectionState="Connecting",this._startInternalPromise=this._startInternal(e),await this._startInternalPromise,"Disconnecting"===this._connectionState){const e="Failed to start the HttpConnection before stop() was called.";return this._logger.log(o.LogLevel.Error,e),await this._stopPromise,Promise.reject(new s(e))}if("Connected"!==this._connectionState){const e="HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!";return this._logger.log(o.LogLevel.Error,e),Promise.reject(new s(e))}this._connectionStarted=!0}send(t){return"Connected"!==this._connectionState?(e.index.showToast({title:"�������"}),Promise.reject(new Error("Cannot send data if the connection is not in the 'Connected' State."))):(this._sendQueue||(this._sendQueue=new X(this.transport)),this._sendQueue.send(t))}async stop(e){return"Disconnected"===this._connectionState?(this._logger.log(o.LogLevel.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnected state.`),Promise.resolve()):"Disconnecting"===this._connectionState?(this._logger.log(o.LogLevel.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnecting state.`),this._stopPromise):(this._connectionState="Disconnecting",this._stopPromise=new Promise((e=>{this._stopPromiseResolver=e})),await this._stopInternal(e),void(await this._stopPromise))}async _stopInternal(e){this._stopError=e;try{await this._startInternalPromise}catch(t){}if(this.transport){try{await this.transport.stop()}catch(t){this._logger.log(o.LogLevel.Error,`HttpConnection.transport.stop() threw error '${t}'.`),this._stopConnection()}this.transport=void 0}else this._logger.log(o.LogLevel.Debug,"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.")}async _startInternal(e){let t=this.baseUrl;this._accessTokenFactory=this._options.accessTokenFactory,this._httpClient._accessTokenFactory=this._accessTokenFactory;try{if(this._options.skipNegotiation){if(this._options.transport!==o.HttpTransportType.WebSockets)throw new Error("Negotiation can only be skipped when using the WebSocket transport directly.");this.transport=this._constructTransport(o.HttpTransportType.WebSockets),await this._startTransport(t,e)}else{let o=null,n=0;do{if(o=await this._getNegotiationResponse(t),"Disconnecting"===this._connectionState||"Disconnected"===this._connectionState)throw new s("The connection was stopped during negotiation.");if(o.error)throw new Error(o.error);if(o.ProtocolVersion)throw new Error("Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.");if(o.url&&(t=o.url),o.accessToken){const e=o.accessToken;this._accessTokenFactory=()=>e,this._httpClient._accessToken=e,this._httpClient._accessTokenFactory=void 0}n++}while(o.url&&n<100);if(100===n&&o.url)throw new Error("Negotiate redirection limit exceeded.");await this._createTransport(t,this._options.transport,o,e)}this.transport instanceof B&&(this.features.inherentKeepAlive=!0),"Connecting"===this._connectionState&&(this._logger.log(o.LogLevel.Debug,"The HttpConnection connected successfully."),this._connectionState="Connected")}catch(n){return this._logger.log(o.LogLevel.Error,"Failed to start the connection: "+n),this._connectionState="Disconnected",this.transport=void 0,this._stopPromiseResolver(),Promise.reject(n)}}async _getNegotiationResponse(e){const t={},[r,s]=S();t[r]=s;const i=this._resolveNegotiateUrl(e);this._logger.log(o.LogLevel.Debug,`Sending negotiation request: ${i}.`);try{const e=await this._httpClient.post(i,{content:"",headers:{...t,...this._options.headers},timeout:this._options.timeout,withCredentials:this._options.withCredentials});if(200!==e.statusCode)return Promise.reject(new Error(`Unexpected status code returned from negotiate '${e.statusCode}'`));const o=JSON.parse(e.content);return(!o.negotiateVersion||o.negotiateVersion<1)&&(o.connectionToken=o.connectionId),o}catch(a){let e="Failed to complete negotiation with the server: "+a;return a instanceof n&&404===a.statusCode&&(e+=" Either this is not a SignalR endpoint or there is a proxy blocking the connection."),this._logger.log(o.LogLevel.Error,e),Promise.reject(new l(e))}}_createConnectUrl(e,t){return t?e+(-1===e.indexOf("?")?"?":"&")+`id=${t}`:e}async _createTransport(e,t,n,r){let i=this._createConnectUrl(e,n.connectionToken);if(this._isITransport(t))return this._logger.log(o.LogLevel.Debug,"Connection was provided an instance of ITransport, using that directly."),this.transport=t,await this._startTransport(i,r),void(this.connectionId=n.connectionId);const a=[],l=n.availableTransports||[];let g=n;for(const h of l){const n=this._resolveTransportOrError(h,t,r);if(n instanceof Error)a.push(`${h.transport} failed:`),a.push(n);else if(this._isITransport(n)){if(this.transport=n,!g){try{g=await this._getNegotiationResponse(e)}catch(p){return Promise.reject(p)}i=this._createConnectUrl(e,g.connectionToken)}try{return await this._startTransport(i,r),void(this.connectionId=g.connectionId)}catch(p){if(this._logger.log(o.LogLevel.Error,`Failed to start the transport '${h.transport}': ${p}`),g=void 0,a.push(new c(`${h.transport} failed: ${p}`,o.HttpTransportType[h.transport])),"Connecting"!==this._connectionState){const e="Failed to select transport before stop() was called.";return this._logger.log(o.LogLevel.Debug,e),Promise.reject(new s(e))}}}}return a.length>0?Promise.reject(new h(`Unable to connect to the server with any of the available transports. ${a.join(" ")}`,a)):Promise.reject(new Error("None of the transports supported by the client are supported by the server."))}_constructTransport(e){switch(e){case o.HttpTransportType.WebSockets:if(!this._options.WebSocket&&!this._options.UniWebSocket)throw new Error("'WebSocket' is not supported in your environment.");return new Q(this._httpClient,this._accessTokenFactory,this._logger,this._options.logMessageContent,this._options.WebSocket,this._options.headers||{});case o.HttpTransportType.ServerSentEvents:if(!this._options.EventSource)throw new Error("'EventSource' is not supported in your environment.");return new z(this._httpClient,this._httpClient._accessToken,this._logger,this._options);case o.HttpTransportType.LongPolling:return new B(this._httpClient,this._logger,this._options);default:throw new Error(`Unknown transport: ${e}.`)}}_startTransport(e,t){return this.transport.onreceive=this.onreceive,this.transport.onclose=e=>this._stopConnection(e),this.transport.connect(e,t)}_resolveTransportOrError(e,t,n){const r=o.HttpTransportType[e.transport];if(null==r)return this._logger.log(o.LogLevel.Debug,`Skipping transport '${e.transport}' because it is not supported by this client.`),new Error(`Skipping transport '${e.transport}' because it is not supported by this client.`);if(!function(e,t){return!e||0!=(t&e)}(t,r))return this._logger.log(o.LogLevel.Debug,`Skipping transport '${o.HttpTransportType[r]}' because it was disabled by the client.`),new a(`'${o.HttpTransportType[r]}' is disabled by the client.`,r);if(!(e.transferFormats.map((e=>o.TransferFormat[e])).indexOf(n)>=0))return this._logger.log(o.LogLevel.Debug,`Skipping transport '${o.HttpTransportType[r]}' because it does not support the requested transfer format '${o.TransferFormat[n]}'.`),new Error(`'${o.HttpTransportType[r]}' does not support ${o.TransferFormat[n]}.`);if(r===o.HttpTransportType.WebSockets&&!this._options.WebSocket&&!this._options.UniWebSocket||r===o.HttpTransportType.ServerSentEvents&&!this._options.EventSource)return this._logger.log(o.LogLevel.Debug,`Skipping transport '${o.HttpTransportType[r]}' because it is not supported in your environment.'`),new i(`'${o.HttpTransportType[r]}' is not supported in your environment.`,r);this._logger.log(o.LogLevel.Debug,`Selecting transport '${o.HttpTransportType[r]}'.`);try{return this._constructTransport(r)}catch(s){return s}}_isITransport(e){return e&&"object"==typeof e&&"connect"in e}_stopConnection(e){if(this._logger.log(o.LogLevel.Debug,`HttpConnection.stopConnection(${e}) called while in state ${this._connectionState}.`),this.transport=void 0,e=this._stopError||e,this._stopError=void 0,"Disconnected"!==this._connectionState){if("Connecting"===this._connectionState)throw this._logger.log(o.LogLevel.Warning,`Call to HttpConnection.stopConnection(${e}) was ignored because the connection is still in the connecting state.`),new Error(`HttpConnection.stopConnection(${e}) was called while the connection is still in the connecting state.`);if("Disconnecting"===this._connectionState&&this._stopPromiseResolver(),e?this._logger.log(o.LogLevel.Error,`Connection disconnected with error '${e}'.`):this._logger.log(o.LogLevel.Information,"Connection disconnected."),this._sendQueue&&(this._sendQueue.stop().catch((e=>{this._logger.log(o.LogLevel.Error,`TransportSendQueue.stop() threw error '${e}'.`)})),this._sendQueue=void 0),this.connectionId=void 0,this._connectionState="Disconnected",this._connectionStarted){this._connectionStarted=!1;try{this.onclose&&this.onclose(e)}catch(t){this._logger.log(o.LogLevel.Error,`HttpConnection.onclose(${e}) threw error '${t}'.`)}}}else this._logger.log(o.LogLevel.Debug,`Call to HttpConnection.stopConnection(${e}) was ignored because the connection is already in the disconnected state.`)}_resolveUrl(e){if(0===e.lastIndexOf("https://",0)||0===e.lastIndexOf("http://",0))return e;if(!f.isBrowser)throw new Error(`Cannot resolve '${e}'.`);const t=window.document.createElement("a");return t.href=e,this._logger.log(o.LogLevel.Information,`Normalizing '${e}' to '${t.href}'.`),t.href}_resolveNegotiateUrl(e){const t=e.indexOf("?");let o=e.substring(0,-1===t?e.length:t);return"/"!==o[o.length-1]&&(o+="/"),o+="negotiate",o+=-1===t?"":e.substring(t),-1===o.indexOf("negotiateVersion")&&(o+=-1===t?"?":"&",o+="negotiateVersion="+this._negotiateVersion),o}}class X{constructor(e){this._transport=e,this._buffer=[],this._executing=!0,this._sendBufferedData=new J,this._transportResult=new J,this._sendLoopPromise=this._sendLoop()}send(e){return this._bufferData(e),this._transportResult||(this._transportResult=new J),this._transportResult.promise}stop(){return this._executing=!1,this._sendBufferedData.resolve(),this._sendLoopPromise}_bufferData(e){if(this._buffer.length&&typeof this._buffer[0]!=typeof e)throw new Error(`Expected data to be of type ${typeof this._buffer} but was of type ${typeof e}`);this._buffer.push(e),this._sendBufferedData.resolve()}async _sendLoop(){for(;;){if(await this._sendBufferedData.promise,!this._executing){this._transportResult&&this._transportResult.reject("Connection stopped.");break}this._sendBufferedData=new J;const t=this._transportResult;this._transportResult=void 0;const o="string"==typeof this._buffer[0]?this._buffer.join(""):X._concatBuffers(this._buffer);this._buffer.length=0;try{await this._transport.send(o),t.resolve()}catch(e){t.reject(e)}}}static _concatBuffers(e){const t=e.map((e=>e.byteLength)).reduce(((e,t)=>e+t)),o=new Uint8Array(t);let n=0;for(const r of e)o.set(new Uint8Array(r),n),n+=r.byteLength;return o.buffer}}class J{constructor(){this.promise=new Promise(((e,t)=>[this._resolver,this._rejecter]=[e,t]))}resolve(){this._resolver()}reject(e){this._rejecter(e)}}class G{constructor(){this.name="json",this.version=1,this.transferFormat=o.TransferFormat.Text}parseMessages(e,t){if("string"!=typeof e)throw new Error("Invalid input for JSON hub protocol. Expected a string.");if(!e)return[];null===t&&(t=d.instance);const n=H.parse(e),r=[];for(const s of n){const e=JSON.parse(s);if("number"!=typeof e.type)throw new Error("Invalid payload.");switch(e.type){case o.MessageType.Invocation:this._isInvocationMessage(e);break;case o.MessageType.StreamItem:this._isStreamItemMessage(e);break;case o.MessageType.Completion:this._isCompletionMessage(e);break;case o.MessageType.Ping:case o.MessageType.Close:break;default:t.log(o.LogLevel.Information,"Unknown message type '"+e.type+"' ignored.");continue}r.push(e)}return r}writeMessage(e){return H.write(JSON.stringify(e))}_isInvocationMessage(e){this._assertNotEmptyString(e.target,"Invalid payload for Invocation message."),void 0!==e.invocationId&&this._assertNotEmptyString(e.invocationId,"Invalid payload for Invocation message.")}_isStreamItemMessage(e){if(this._assertNotEmptyString(e.invocationId,"Invalid payload for StreamItem message."),void 0===e.item)throw new Error("Invalid payload for StreamItem message.")}_isCompletionMessage(e){if(e.result&&e.error)throw new Error("Invalid payload for Completion message.");!e.result&&e.error&&this._assertNotEmptyString(e.error,"Invalid payload for Completion message."),this._assertNotEmptyString(e.invocationId,"Invalid payload for Completion message.")}_assertNotEmptyString(e,t){if("string"!=typeof e||""===e)throw new Error(t)}}const Y={trace:o.LogLevel.Trace,debug:o.LogLevel.Debug,info:o.LogLevel.Information,information:o.LogLevel.Information,warn:o.LogLevel.Warning,warning:o.LogLevel.Warning,error:o.LogLevel.Error,critical:o.LogLevel.Critical,none:o.LogLevel.None};o.AbortError=s,o.DefaultHttpClient=$,o.HttpClient=p,o.HttpError=n,o.HttpResponse=g,o.HubConnection=N,o.HubConnectionBuilder=class{configureLogging(e){if(v.isRequired(e,"logging"),void 0!==e.log)this.logger=e;else if("string"==typeof e){const t=function(e){const t=Y[e.toLowerCase()];if(void 0!==t)return t;throw new Error(`Unknown log level: ${e}`)}(e);this.logger=new C(t)}else this.logger=new C(e);return this}withUrl(e,t){return v.isRequired(e,"url"),v.isNotEmpty(e,"url"),this.url=e,this.httpConnectionOptions="object"==typeof t?{...this.httpConnectionOptions,...t}:{...this.httpConnectionOptions,transport:t},this}withHubProtocol(e){return v.isRequired(e,"protocol"),this.protocol=e,this}withAutomaticReconnect(e){if(this.reconnectPolicy)throw new Error("A reconnectPolicy has already been set.");return e?Array.isArray(e)?this.reconnectPolicy=new A(e):this.reconnectPolicy=e:this.reconnectPolicy=new A,this}withServerTimeout(e){return v.isRequired(e,"milliseconds"),this._serverTimeoutInMilliseconds=e,this}withKeepAliveInterval(e){return v.isRequired(e,"milliseconds"),this._keepAliveIntervalInMilliseconds=e,this}build(){const e=this.httpConnectionOptions||{};if(void 0===e.logger&&(e.logger=this.logger),!this.url)throw new Error("The 'HubConnectionBuilder.withUrl' method must be called before building the connection.");const t=new V(this.url,e);return N.create(t,this.logger||d.instance,this.protocol||new G,this.reconnectPolicy,this._serverTimeoutInMilliseconds,this._keepAliveIntervalInMilliseconds)}},o.JsonHubProtocol=G,o.NullLogger=d,o.Subject=x,o.TimeoutError=r,o.VERSION=_},"object"==typeof exports&&"undefined"!=typeof module?n(exports):"function"==typeof define&&define.amd?define(["exports"],n):n((o="undefined"!=typeof globalThis?globalThis:o||self).signalR={});
