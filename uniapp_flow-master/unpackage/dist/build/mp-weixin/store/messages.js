"use strict";const t=require("../common/vendor.js"),e={namespaced:!0,state:{$chatChannels:[],hasFirstLoad:new Map},mutations:{addChat(e,a){a&&(e.$chatChannels.push(a),t.index.setStorage({key:"cc"+a.cid,data:a}))},delete(t,e){let a=t.$chatChannels.findIndex((t=>t.cid==parseInt(e.cid)));-1!==a&&t.$chatChannels.splice(a,1)},update(t,e){let a,n=t.$chatChannels.findIndex((t=>t.cid==parseInt(e.cid)));-1!==n&&(a=t.$chatChannels[n]),a?(e&&e.title&&(a.title=e.title),e&&e.date&&(a.date=e.date),e&&e.content&&(a.content=e.content),a.unread?a.unread+=1:a.unread=1):this.commit("Msgs/addChat",e)},getById(t,e){let a=t.$chatChannels.findIndex((t=>t.cid==parseInt(e)));return-1!==a?t.$chatChannels[a]:null},clearUnread(t,e){let a=t.$chatChannels.findIndex((t=>t.cid==parseInt(e)));if(-1!==a)return t.$chatChannels[a].unread=""},exists:(t,e)=>-1!==t.$chatChannels.findIndex((t=>t.cid==parseInt(e))),initChatChannels(e){let a=t.index.getStorageInfoSync().keys.filter((t=>t.startsWith("cc")));for(let n of a)e.$chatChannels.push(t.index.getStorageSync(n))}},getters:{getCcById:t=>e=>{let a=t.$chatChannels.findIndex((t=>t.cid==parseInt(e)));return-1!==a?t.$chatChannels[a]:null},getHasFirstLoad:t=>e=>void 0!==t.hasFirstLoad.get(e)},actions:{addChatAsync({commit:t,state:e},a){t("addChat",a)},deleteAsync({commit:t,state:e},a){t("delete",a)},updateAsync({commit:t,state:e},a){t("update",a)},getByIdAsync:({commit:t,state:e},a)=>new Promise(((e,n)=>{e(t("getById",a))})),existsAsync:({commit:t,state:e},a)=>new Promise(((e,n)=>{e(t("exists",a))})),updateHasFirstLoad({state:t},e){void 0===t.hasFirstLoad.get(e)&&t.hasFirstLoad.set(e,!0)}}};exports.Messages=e;
